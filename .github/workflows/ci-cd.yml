name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend
          npm install
          
  docker:
    needs: build  # Solo se ejecuta si la etapa de build fue exitosa
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      - name: Build Docker image
        run: |
          docker build -t my-app:latest .
          # Etiqueta la imagen con el ID de commit para tener un historial de versiones
          docker tag my-app:latest ${{ secrets.ECR_REPOSITORY_URI }}:latest
          docker tag my-app:latest ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}
